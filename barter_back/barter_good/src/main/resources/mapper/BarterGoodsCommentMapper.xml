<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.barter_good.mapper.BarterGoodsCommentMapper">

    <resultMap type="com.example.barter_good.domain.entity.BarterGoodsComment" id="BarterGoodsCommentMap">
        <result property="commentId" column="comment_id" jdbcType="INTEGER"/>
        <result property="goodsId" column="goods_id" jdbcType="INTEGER"/>
        <result property="userId" column="user_id" jdbcType="INTEGER"/>
        <result property="content" column="content" jdbcType="VARCHAR"/>
        <result property="createdTime" column="created_time" jdbcType="TIMESTAMP"/>
        <result property="state" column="state" jdbcType="INTEGER"/>
    </resultMap>

    <!--查询单个-->
    <select id="queryById" resultMap="BarterGoodsCommentMap">
        select
          comment_id, goods_id, user_id, content, created_time, state
        from barter_goods_comment
        where comment_id = #{commentId}
    </select>

    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="BarterGoodsCommentMap">
        select
          comment_id, goods_id, user_id, content, created_time, state
        from barter_goods_comment
        <where>
            <if test="commentId != null">
                and comment_id = #{commentId}
            </if>
            <if test="goodsId != null">
                and goods_id = #{goodsId}
            </if>
            <if test="userId != null">
                and user_id = #{userId}
            </if>
            <if test="content != null and content != ''">
                and content = #{content}
            </if>
            <if test="createdTime != null">
                and created_time = #{createdTime}
            </if>
            <if test="state != null">
                and state = #{state}
            </if>
        </where>
        limit #{pageable.offset}, #{pageable.pageSize}
    </select>

    <!--统计总行数-->
    <select id="count" resultType="java.lang.Long">
        select count(1)
        from barter_goods_comment
        <where>
            <if test="commentId != null">
                and comment_id = #{commentId}
            </if>
            <if test="goodsId != null">
                and goods_id = #{goodsId}
            </if>
            <if test="userId != null">
                and user_id = #{userId}
            </if>
            <if test="content != null and content != ''">
                and content = #{content}
            </if>
            <if test="createdTime != null">
                and created_time = #{createdTime}
            </if>
            <if test="state != null">
                and state = #{state}
            </if>
        </where>
    </select>
    <select id="queryByGoodsId" resultMap="BarterGoodsCommentMap" resultType="com.example.barter_good.domain.entity.BarterGoodsComment">
        select
          comment_id, goods_id, user_id, content, created_time, state
        from barter_goods_comment
        where goods_id = #{goodsId}
    </select>

    <!--新增所有列-->
    <insert id="insert" keyProperty="commentId" useGeneratedKeys="true">
        insert into barter_goods_comment(goods_id, user_id, content, created_time, state)
        values (#{goodsId}, #{userId}, #{content}, #{createdTime}, #{state})
    </insert>

    <insert id="insertBatch" keyProperty="commentId" useGeneratedKeys="true">
        insert into barter_goods_comment(goods_id, user_id, content, created_time, state)
        values
        <foreach collection="entities" item="entity" separator=",">
        (#{entity.goodsId}, #{entity.userId}, #{entity.content}, #{entity.createdTime}, #{entity.state})
        </foreach>
    </insert>

    <insert id="insertOrUpdateBatch" keyProperty="commentId" useGeneratedKeys="true">
        insert into barter_goods_comment(goods_id, user_id, content, created_time, state)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.goodsId}, #{entity.userId}, #{entity.content}, #{entity.createdTime}, #{entity.state})
        </foreach>
        on duplicate key update
        goods_id = values(goods_id),
        user_id = values(user_id),
        content = values(content),
        created_time = values(created_time),
        state = values(state)
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update barter_goods_comment
        <set>
            <if test="goodsId != null">
                goods_id = #{goodsId},
            </if>
            <if test="userId != null">
                user_id = #{userId},
            </if>
            <if test="content != null and content != ''">
                content = #{content},
            </if>
            <if test="createdTime != null">
                created_time = #{createdTime},
            </if>
            <if test="state != null">
                state = #{state},
            </if>
        </set>
        where comment_id = #{commentId}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete from barter_goods_comment where comment_id = #{commentId}
    </delete>

</mapper>

